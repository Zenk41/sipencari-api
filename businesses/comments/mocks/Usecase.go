// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	comments "sipencari-api/businesses/comments"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: idUser, idPost, commentDomain
func (_m *Usecase) Create(idUser string, idPost string, commentDomain *comments.Domain) comments.Domain {
	ret := _m.Called(idUser, idPost, commentDomain)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(string, string, *comments.Domain) comments.Domain); ok {
		r0 = rf(idUser, idPost, commentDomain)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	return r0
}

// Delete provides a mock function with given fields: idPost, idComment
func (_m *Usecase) Delete(idPost string, idComment string) bool {
	ret := _m.Called(idPost, idComment)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(idPost, idComment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: idPost
func (_m *Usecase) GetAll(idPost string) []comments.Domain {
	ret := _m.Called(idPost)

	var r0 []comments.Domain
	if rf, ok := ret.Get(0).(func(string) []comments.Domain); ok {
		r0 = rf(idPost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Domain)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: idPost, id
func (_m *Usecase) GetByID(idPost string, id string) comments.Domain {
	ret := _m.Called(idPost, id)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(string, string) comments.Domain); ok {
		r0 = rf(idPost, id)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	return r0
}

// Update provides a mock function with given fields: idUser, idPost, idComment, commentDomain
func (_m *Usecase) Update(idUser string, idPost string, idComment string, commentDomain *comments.Domain) comments.Domain {
	ret := _m.Called(idUser, idPost, idComment, commentDomain)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(string, string, string, *comments.Domain) comments.Domain); ok {
		r0 = rf(idUser, idPost, idComment, commentDomain)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	return r0
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
