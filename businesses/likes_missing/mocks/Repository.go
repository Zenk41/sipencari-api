// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	likesmissing "sipencari-api/businesses/likes_missing"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: idMissing
func (_m *Repository) GetAll(idMissing string) []likesmissing.Domain {
	ret := _m.Called(idMissing)

	var r0 []likesmissing.Domain
	if rf, ok := ret.Get(0).(func(string) []likesmissing.Domain); ok {
		r0 = rf(idMissing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]likesmissing.Domain)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: idLike, idMissing
func (_m *Repository) GetByID(idLike string, idMissing string) likesmissing.Domain {
	ret := _m.Called(idLike, idMissing)

	var r0 likesmissing.Domain
	if rf, ok := ret.Get(0).(func(string, string) likesmissing.Domain); ok {
		r0 = rf(idLike, idMissing)
	} else {
		r0 = ret.Get(0).(likesmissing.Domain)
	}

	return r0
}

// Like provides a mock function with given fields: idUser, idMissing, likeDomain
func (_m *Repository) Like(idUser string, idMissing string, likeDomain *likesmissing.Domain) likesmissing.Domain {
	ret := _m.Called(idUser, idMissing, likeDomain)

	var r0 likesmissing.Domain
	if rf, ok := ret.Get(0).(func(string, string, *likesmissing.Domain) likesmissing.Domain); ok {
		r0 = rf(idUser, idMissing, likeDomain)
	} else {
		r0 = ret.Get(0).(likesmissing.Domain)
	}

	return r0
}

// Unlike provides a mock function with given fields: idUser, idMissing
func (_m *Repository) Unlike(idUser string, idMissing string) bool {
	ret := _m.Called(idUser, idMissing)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(idUser, idMissing)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
